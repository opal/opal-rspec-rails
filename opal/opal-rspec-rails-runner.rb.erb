require 'opal'
require 'opal-rspec'
require 'native'
require 'console'
require 'opal/platform'

class Opal::RSpec::QueryStringConfig
  def initialize(string)
    @query_string = string
    @params = parse_query_string(string)
  end

  def [] name
    @params.select {|(k,_v)| k == name}.map(&:last)
  end

  def pattern
    self[:pattern].first || '**/*_spec'
  end

  def pattern_regexp
    Regexp.new(pattern)
  end

  def files
    self[:files].to_s.split(':')
  end

  module Utils
    def parse_query_string(string)
      string[1..-1].to_s.split('&').map {|param| p(param).split('=', 2)}
    end
  end

  include Utils
end

query_config = Opal::RSpec::QueryStringConfig.new(`String(window.location.search)`)

all_loaded_files = Hash.new(`Opal.modules`).keys
all_files        = query_config.files.any? ? query_config.files : all_loaded_files
matching_files   = all_loaded_files.grep(query_config.pattern_regexp)
p matching_files: matching_files, query: query_config.pattern_regexp, loaded: all_loaded_files.grep(/_spec/), explicit: query_config.files
matching_files.each { |file| require file }


# We do this to preload all files but actually require
# only those matching the pattern.

# ERB: <%
  spec_location = Rails.root.join(Rails.application.config.opal_rspec.spec_location)

  # Preload all files from `config.opal_rspec.spec_location`
  entries = Dir["#{spec_location}/**"].map{|p| Pathname(p).relative_path_from(spec_location) }

  # â€¦and all files in `config.opal_rspec.preload`
  entries += Rails.application.config.opal_rspec.preload
# ERB: %>

if false
  # ERB: <%=
    # Require all files
    entries.map{|e| "\n  require #{e.to_s.sub(/\.rb$/,'').inspect};"}.join
  # ERB: %>
end


# Patch the RSpec runner to work with Kernel.exit
RSpec::Core::Runner.class_eval do
  def self.autorun
    at_exit do
      # see NoCarriageReturnIO source for why this is being done (not on Node though)
      err, out = get_opal_closed_tty_io
      # Have to do this in 2 places. This will ensure the default formatter gets the right IO, but need to do this in config for custom formatters
      # that will be constructed BEFORE this runs, see rspec.rb
      run(ARGV, err, out).then do |status|
        exit 0
      end
    end
  end

  def self.exit_with_code(code)
    exit(code)
  end
end

RSpec::Core::Runner.autorun

exit
