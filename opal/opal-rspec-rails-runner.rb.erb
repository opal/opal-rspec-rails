require 'opal'
require 'opal-rspec'
require 'native'
require 'console'

class Opal::RSpec::QueryStringConfig
  def initialize(string)
    @query_string = string
    @params = parse_query_string(string)
  end

  def [] name
    @params.select {|(k,_v)| k == name}.map(&:last)
  end

  def pattern
    self[:pattern].first || '**/*_spec'
  end

  def pattern_regexp
    glob_to_regexp(pattern)
  end

  def files
    self[:files].to_s.split(':')
  end

  module Utils
    def glob_to_regexp(glob)
      # pattern.split('/').each do
      pattern = glob
      escaped_pattern = Regexp.escape(pattern)
      transformed_glob = escaped_pattern.gsub('**/', '.*').gsub('\*', '[^/]*').gsub('\?', '.')
      p glob: glob, escaped_pattern: escaped_pattern, transformed_glob: transformed_glob
      regexp = Regexp.new('^'+transformed_glob+'$')
      $console.log regexp
      regexp
    end

    def parse_query_string(string)
      string[1..-1].to_s.split('&').map {|param| p(param).split('=', 2)}
    end
  end

  include Utils
end

query_config = Opal::RSpec::QueryStringConfig.new(`String(window.location.search)`)

all_loaded_files = Hash.new(`Opal.modules`).keys
all_files        = query_config.files || all_loaded_files
matching_files   = all_files.grep(query_config.pattern_regexp)

matching_files.each { |file| require file }

# Preload all files ending with "_spec"
if false
  # ERB: <% spec_location = Rails.root.join(Rails.application.config.opal_rspec.spec_location) %>
  # ERB: <% entries = Dir["#{spec_location}/**/*_spec.rb"].map{|p| Pathname(p).relative_path_from(spec_location) } %>
  # ERB: <% entries += Rails.application.config.opal_rspec.preload %>
  # ERB: <%= entries.map{|e| "\n  require #{e.to_s.sub(/\.rb$/,'').inspect};"}.join %> # Make syntax higlighters happy: %>
end


# Patch the RSpec runner to work with Kernel.exit
RSpec::Core::Runner.class_eval do
  def self.autorun
    at_exit do
      # see NoCarriageReturnIO source for why this is being done (not on Node though)
      err, out = get_opal_closed_tty_io
      # Have to do this in 2 places. This will ensure the default formatter gets the right IO, but need to do this in config for custom formatters
      # that will be constructed BEFORE this runs, see rspec.rb
      run(ARGV, err, out).then do |status|
        exit 0
      end
    end
  end

  def self.exit_with_code(code)
    exit(code)
  end
end

RSpec::Core::Runner.autorun

exit
